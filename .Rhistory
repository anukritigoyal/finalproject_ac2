state.shootings <- shootings %>% group_by(state) %>% mutate(state.killed = colSums(state, na.ram = TRUE))
state.shootings <- shootings %>% group_by(state) %>% colSums(injured) %>% colSums(killed)
state.shootings <- shootings %>% group_by(state) %>% colSums()
state.shootings <- shootings %>% group_by(state) %>% colSums(shootings$killed)
state.shootings <- shootings %>% group_by(state) %>% select(injured) %>% colSums(shootings$killed)
state.shootings <- shootings %>% group_by(state) %>% select(injured) %>% colSums(na.rm = TRUE)
state.shootings <- shootings %>% group_by(state) %>% select(killed) %>% colSums(na.rm = TRUE)
state.shootings <- shootings %>% select(killed) %>% colSums(na.rm = TRUE)
state.shootings <- shootings %>% mutate(killed.and.injured = killed + injured) %>% group_by(state) %>% summarise(max = max(killed))
View(state.shootings)
state.shootings <- shootings %>% mutate(killed.and.injured = killed + injured) %>% group_by(state)
state.shootings <- shootings %>% mutate(killed.and.injured = killed + injured) %>% group_by(state) %>% summarise(max = max(killed.and.injured))
state.shootings <- shootings %>% mutate(killed.and.injured = killed + injured) %>% group_by(state) %>% summarise(max = max.killed.and.injured(killed.and.injured))
state.shootings <- shootings %>% mutate(killed.and.injured = killed + injured) %>% group_by(state) %>% summarise(max.killed.and.injured = max(killed.and.injured))
library(knitr)
kable(state.shootings, format = "markdown")
tate.shootings <- shootings %>% mutate(killed.and.injured = killed + injured) %>% group_by(state) %>% summarise(max.killed.and.injured = max(killed.and.injured))
colnames(state.shootings) <- c("State", "Max Number of Civilians Injured and Killed During A Single Shooting")
kable(state.shootings, format = "markdown")
View(state.shootings)
map.data
map.data <- shootings %>% mutate(casulaties - injured + killed)
library(dplyr)
map.data <- shootings %>% mutate(casulaties - injured + killed)
> map.data <- shootings %>% mutate(casulaties = injured + killed)
map.data <- shootings %>% mutate(casulaties = injured + killed)
View(map.data)
data <- read.csv("~/Downloads/Consumer_Complaints.csv")
shiny::runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else {
output.y = data %>% select(calories)
}
input$ratings
ggplot(data, aes(x = name, y = output.y)) + geom_point()
})
})
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
sliderInput('ratings',
label = "Calories in Cereals",
min = min(data$rating),
max = max(data$rating),
value = c(30, 70)),
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories")
),
mainPanel(
plotOutput("scatter")
)
)
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories")
),
radioButtons("color",
label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black'),
mainPanel(
plotOutput("scatter")
)
)
))
library(shiny)
library(dplyr)
library(ggplot2)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else {
output.y = data %>% select(calories)
}
input$ratings
ggplot(data, aes(x = name, y = output.y, col = input$color)) + geom_point()
})
})
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories")
),
radioButtons("color",
label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black'),
mainPanel(
plotOutput("scatter")
)
)
))
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories")
),
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
mainPanel(
plotOutput("scatter")
)
)
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories"),
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black'),
),
mainPanel(
plotOutput("scatter")
)
)
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories"),
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black')
),
mainPanel(
plotOutput("scatter")
)
)
))
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(plotly)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else {
output.y = data %>% select(calories)
}
input$ratings
plot_ly(data, x = ~name, y = output.y,
marker = list(size = 10,
color = input$color))
# ggplot(data, aes(x = name, y = output.y, col = input$color)) + geom_point()
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else {
output.y = data %>% select(calories)
}
input$ratings
p <- plot_ly(data, x = ~name, y = output.y,
marker = list(size = 10,
color = input$color))
return(p)
# ggplot(data, aes(x = name, y = output.y, col = input$color)) + geom_point()
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else if (input$nutrition == "Calories") {
output.y = data %>% select(calories)
}
plot_ly(data, x = ~name, y = output.y,
marker = list(size = 10,
color = input$color))
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else if (input$nutrition == "Calories") {
output.y = data %>% select(calories)
}
plot_ly(data, x = ~name, y = ~output.y,
marker = list(size = 10,
color = input$color))
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
# Uses input to create a plot
shinyServer(function(input, output) {
# Creates the plot depending on what information the user wants to see
output$graph <- renderPlotly({
if (input$nutrition == "Calories") {
y = ~calories
} else if (input$nutrition == "Protein") {
y = ~protein
} else if (input$nutrition == "Fat") {
y = ~fat
} else if (input$nutrition == "Sodium") {
y = ~sodium
} else if (input$nutrition == "Fiber") {
y = ~fiber
} else if (input$nutrition == "Carbohydrates") {
y = ~carbo
} else if (input$nutrition == "Sugars") {
y = ~sugars
} else if (input$nutrition == "Potassium") {
y = ~potass
} else {
y = ~vitamins
}
# Creates the plot
plot_ly(data, x = ~name, y = y,
marker = list(size = 10,
color = input$color))
})
})
library(shiny)
shinyUI(fluidPage(
titlePanel("Nutritional Value in Various Cereals"),
# Creates the widgets on the sidebar of the page
sidebarLayout(
sidebarPanel(
# Widget that allows users to choose what type of information they want to see
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories"),
# Widget that allows the user to change the color of the graph
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black')
),
# Creates the plot on the main panel of the page
mainPanel(
plotlyOutput("graph")
)
)
))
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
# Uses input to create a plot
shinyServer(function(input, output) {
# Creates the plot depending on what information the user wants to see
output$graph <- renderPlotly({
if (input$nutrition == "Calories") {
y = ~calories
} else if (input$nutrition == "Protein") {
y = ~protein
} else if (input$nutrition == "Fat") {
y = ~fat
} else if (input$nutrition == "Sodium") {
y = ~sodium
} else if (input$nutrition == "Fiber") {
y = ~fiber
} else if (input$nutrition == "Carbohydrates") {
y = ~carbo
} else if (input$nutrition == "Sugars") {
y = ~sugars
} else if (input$nutrition == "Potassium") {
y = ~potass
} else {
y = ~vitamins
}
# Creates the plot
plot_ly(data, x = ~name, y = y,
marker = list(size = 10,
color = input$color))
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
setwd("~/Desktop/INFO 201")
data <- read.csv("/U.S._Chronic_Disease_Indicators__CDI_.csv/")
data <- read.csv("/data.csv/")
data <- read.csv("data.csv/")
data <- read.csv("data.csv")
data <- read.csv("data.csv")
data <- read.csv("data.csv/")
library(readr)
data <- read_csv("~/Desktop/INFO 201/data.csv")
View(data)
topics <- length(unique(data))
library(dplyr)
topics <- data %>% unique(topic)
topics <- data %>% unique("topic")
topics <- data %>% unique("Topic")
topics <- data %>% unique(Topic)
topics <- data %>% select(Topic)
View(topics)
topics <- data %>% select(Topic) %>% unique()
topics <- data %>% select(Topic) %>% mutate(count = n()) %>% unique()
topics <- data %>% select(Topic) %>% group-group_by(topic) %>% mutate(count = n()) %>% unique()
topics <- data %>% select(Topic) %>% group-group_by(topic) %>% mutate(count = n()) %>% unique()
topics <- data %>% select(Topic) %>% group_by(topic) %>% mutate(count = n()) %>% unique()
topics <- data %>% select(Topic) %>% group_by(Topic) %>% mutate(count = n()) %>% unique()
new.data <- data %>% filter(Topic == "Diabetes", Topic = "Alcohol")
new.data <- data %>% filter(Topic == "Diabetes" | Topic = "Alcohol")
new.data <- data %>% filter(Topic == "Diabetes")
View(new.data)
diabetes <- data %>% filter(Topic == "Diabetes")
alcohol <- data %>% filter(Topic == "Alcohol")
tobacco <- data %>% filter(Topci == "Tobacco")
View(diabetes)
View(alcohol)
alcohol <- data %>% filter(Topic == "Asthma")
diabetes <- data %>% filter(Topic == "Diabetes")
asthma <- data %>% filter(Topic == "Asthma")
tobacco <- data %>% filter(Topic == "Tobacco")
diabetes <- data %>% filter(Topic == "Diabetes")
asthma <- data %>% filter(Topic == "Asthma")
tobacco <- data %>% filter(Topic == "Tobacco")
library(dplyr)
diabetes <- data %>% filter(Topic == "Diabetes")
asthma <- data %>% filter(Topic == "Asthma")
tobacco <- data %>% filter(Topic == "Tobacco")
diabetes <- data %>% filter(Topic == "Diabetes")
diabetes <- data %>% filter(Topic == "Diabetes")
library(dplyr)
data <- read.csv("data.csv/")
library(readr)
data <- read_csv("~/Desktop/INFO 201/data.csv")
View(data)
diabetes <- data %>% filter(Topic == "Diabetes")
asthma <- data %>% filter(Topic == "Asthma")
tobacco <- data %>% filter(Topic == "Tobacco")
View(asthma)
View(diabetes)
View(tobacco)
diabetes <- data %>% filter(Topic == "Diabetes")
write.csv(diabetes, file = "~/Desktop/diabetes.csv", row.names = FALSE)
asthma <- data %>% filter(Topic == "Asthma")
write.csv(diabetes, file = "~/Desktop/asthma.csv", row.names = FALSE)
tobacco <- data %>% filter(Topic == "Tobacco")
write.csv(diabetes, file = "~/Desktop/tobacco.csv", row.names = FALSE)
setwd("~/Desktop/finalproject_ac2")
diabetes.data <- read.csv("diabetes.csv")
View(diabetes.data)
diabetes.data <- read.csv("diabetes.csv", stringsAsFactors = FALSE)
asthma.data <- read.csv("asthma.csv", stringAsFactors = FALSE)
asthma.data <- read.csv("asthma.csv", stringsAsFactors = FALSE)
tobacco.data <- read.csv("tobacco.csv", stringsAsFactors = FALSE)
View(asthma.data)
View(tobacco.data)

label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories")
),
radioButtons("color",
label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black'),
mainPanel(
plotOutput("scatter")
)
)
))
library(shiny)
library(dplyr)
library(ggplot2)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else {
output.y = data %>% select(calories)
}
input$ratings
ggplot(data, aes(x = name, y = output.y, col = input$color)) + geom_point()
})
})
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories")
),
radioButtons("color",
label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black'),
mainPanel(
plotOutput("scatter")
)
)
))
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories")
),
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
mainPanel(
plotOutput("scatter")
)
)
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories"),
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black'),
),
mainPanel(
plotOutput("scatter")
)
)
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Cereal Data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories"),
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black')
),
mainPanel(
plotOutput("scatter")
)
)
))
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(plotly)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else {
output.y = data %>% select(calories)
}
input$ratings
plot_ly(data, x = ~name, y = output.y,
marker = list(size = 10,
color = input$color))
# ggplot(data, aes(x = name, y = output.y, col = input$color)) + geom_point()
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else {
output.y = data %>% select(calories)
}
input$ratings
p <- plot_ly(data, x = ~name, y = output.y,
marker = list(size = 10,
color = input$color))
return(p)
# ggplot(data, aes(x = name, y = output.y, col = input$color)) + geom_point()
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else if (input$nutrition == "Calories") {
output.y = data %>% select(calories)
}
plot_ly(data, x = ~name, y = output.y,
marker = list(size = 10,
color = input$color))
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
if (input$nutrition == "Protein") {
output.y = data %>% select(protein)
} else if (input$nutrition == "Fat") {
output.y = data %>% select(fat)
} else if (input$nutrition == "Sodium") {
output.y = data %>% select(sodium)
} else if (input$nutrition == "Fiber") {
output.y = data %>% select(fiber)
} else if (input$nutrition == "Carbohydrates") {
output.y = data %>% select(carbo)
} else if (input$nutrition == "Sugars") {
output.y = data %>% select(sugars)
} else if (input$nutrition == "Potassium") {
output.y = data %>% select(potass)
} else if (input$nutrition == "Calories") {
output.y = data %>% select(calories)
}
plot_ly(data, x = ~name, y = ~output.y,
marker = list(size = 10,
color = input$color))
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
# Uses input to create a plot
shinyServer(function(input, output) {
# Creates the plot depending on what information the user wants to see
output$graph <- renderPlotly({
if (input$nutrition == "Calories") {
y = ~calories
} else if (input$nutrition == "Protein") {
y = ~protein
} else if (input$nutrition == "Fat") {
y = ~fat
} else if (input$nutrition == "Sodium") {
y = ~sodium
} else if (input$nutrition == "Fiber") {
y = ~fiber
} else if (input$nutrition == "Carbohydrates") {
y = ~carbo
} else if (input$nutrition == "Sugars") {
y = ~sugars
} else if (input$nutrition == "Potassium") {
y = ~potass
} else {
y = ~vitamins
}
# Creates the plot
plot_ly(data, x = ~name, y = y,
marker = list(size = 10,
color = input$color))
})
})
library(shiny)
shinyUI(fluidPage(
titlePanel("Nutritional Value in Various Cereals"),
# Creates the widgets on the sidebar of the page
sidebarLayout(
sidebarPanel(
# Widget that allows users to choose what type of information they want to see
selectInput(inputId = "nutrition",
label = "Nutrition in Cereal",
choices = c("Calories", "Protein", "Fat", "Sodium", "Fiber", "Carbohydrates", "Sugars", "Potassium", "Vitamins"),
selected = "Calories"),
# Widget that allows the user to change the color of the graph
radioButtons("color",
label = "Color of Graph",
choices = list("Green" = 'green', "Blue" = 'blue', "Red" = 'red', "Black" = 'black'),
selected = 'black')
),
# Creates the plot on the main panel of the page
mainPanel(
plotlyOutput("graph")
)
)
))
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
# Read in data
data <- read.table("./data/cereal.tsv", header = TRUE)
# Uses input to create a plot
shinyServer(function(input, output) {
# Creates the plot depending on what information the user wants to see
output$graph <- renderPlotly({
if (input$nutrition == "Calories") {
y = ~calories
} else if (input$nutrition == "Protein") {
y = ~protein
} else if (input$nutrition == "Fat") {
y = ~fat
} else if (input$nutrition == "Sodium") {
y = ~sodium
} else if (input$nutrition == "Fiber") {
y = ~fiber
} else if (input$nutrition == "Carbohydrates") {
y = ~carbo
} else if (input$nutrition == "Sugars") {
y = ~sugars
} else if (input$nutrition == "Potassium") {
y = ~potass
} else {
y = ~vitamins
}
# Creates the plot
plot_ly(data, x = ~name, y = y,
marker = list(size = 10,
color = input$color))
})
})
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
runApp('Desktop/INFO 201/a8-building-apps-anukritigoyal')
library(dplyr)
data <- diabetes.data %>% filter(Question == "Diabetes prevalence among women aged 18-44 years")
diabetes.data <- read.csv("diabetes.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/finalproject_ac2")
diabetes.data <- read.csv("diabetes.csv", stringsAsFactors = FALSE)
data <- diabetes.data %>% filter(Question == "Diabetes prevalence among women aged 18-44 years")
View(data)
unique.questions <- diabetes.data %>% unique(Question)
unique.questions <- diabetes.data %>% unique("Question")
unique.questions <- diabetes.data %>% unique(select(Question))
unique.questions <- diabetes.data %>% unique(select(Topic))
unique.questions <- diabetes.data %>% select(Question)
unique.questions <- diabetes.data %>% select(Question) %>% unique()
??unique
View(unique.questions)
unique.questions <- data %>% filter(LocationAbbr == "CA")
View(unique.questions)
unique.questions <- data %>% filter(LocationAbbr == "CA") %>% filter(YearStart == "2015")
unique.questions <- data %>% filter(LocationAbbr == "CA") %>% filter(YearStart == "2012")
unique.questions <- data %>% filter(LocationAbbr == "CA") # %>% filter(YearStart == "2012")
unique.questions <- data %>% filter(LocationAbbr == "CA") %>% filter(YearStart == "2012")
stratification <- diabetes.data %>% unique(Stratification1)
questions <- diabetes.data %>% unique(Question)
questions <- diabetes.data %>% distinct(Question)
View(questions)
data <- diabetes.data %>% filter(Question == "Hospitalization with diabetes as a listed diagnosis")
gender <- diabetes.data %>% filter(StratificationCategory1 == "Gender")
View(gender)
gender <- diabetes.data %>% filter(StratificationCategory1 == "Gender") %>% distinct(Question)
gender <- diabetes.data %>% filter(StratificationCategory1 == "Race/Ethnicity") %>% distinct(Question)
library(readr)
data <- read_csv("~/Desktop/data.csv")
View(data)
cancer <- data %>% filter(Topic == "Cardiovascular Disease")
View(cancer)
??write.csv
write.csv(cancer, file = "~/Desktop/finalproject_ac2/cancer.csv", row.names = FALSE)
write.csv(cancer, file = "~/Desktop/finalproject_ac2/cardiovascular.csv", row.names = FALSE)
cancer <- data %>% filter(Topic == "Cancer")
write.csv(cancer, file = "~/Desktop/finalproject_ac2/cancer.csv", row.names = FALSE)
cancer.data <- read.csv("cancer.csv", stringsAsFactors = FALSE)
cardio.data <- read.csv("cardiovascular.csv", stringsAsFactors = FALSE)
diabetes.data <- read.csv("diabetes.csv", stringsAsFactors = FALSE)
cancer.data <- read.csv("cancer.csv", stringsAsFactors = FALSE)
cardio.data <- read.csv("cardiovascular.csv", stringsAsFactors = FALSE)
View(cancer.data)
diabetes.mortality <- diabetes.data %>% filter(Question == "Mortality due to diabetes reported as any listed cause of death")
View(diabetes.mortality)
View(cancer.data)
cancer.mortality <- cancer.data %>% filter(Question == "Invasive cancer (all sites combined), mortality")
View(cancer.mortality)
cancer.incidence <- cancer.data %>% filter(Question == "Invasive cancer (all sites combined), incidence")
View(cancer.incidence)
cardio.mortality <- cardio.data %>% filter(Question == "Mortality from total cardiovascular diseases")
View(cancer.mortality)
blah <- cancer.data %>% filter(Question == "Cancer of the female breast, mortality")
View(blah)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
data <- read_csv("~/Desktop/data.csv")
View(data)
pulmonary <- data %>% filter(Topic == "Chronic Obstructive Pulmonary Disease")
View(pulmonary)
write.csv(pulmonary, file = "~/Desktop/finalproject.ac2/pulmonary.csv", row.names = FALSE)
write.csv(pulmonary, file = "~/Desktop/finalproject_ac2/pulmonary.csv", row.names = FALSE)
View(cardio.mortality)
View(diabetes.mortality)
View(diabetes.data)
library(plotly)
library(dplyr)
diabetes <- diabetes.data %>% select(YearStart, LocationAbbr, LocationDesc, Topic, DataValue, StratificationCategory1, Stratification1)
View(diabetes)
diabetes <- diabetes.data %>% select(YearStart, LocationAbbr, LocationDesc, Topic, DataValue,
DataValueType, DataValueUnit,
StratificationCategory1, Stratification1)
diabetes <- diabetes.data %>% select(YearStart, LocationAbbr, LocationDesc, Topic, DataValue,
DataValueType, DataValueUnit,
StratificationCategory1, Stratification1)
g <- list (
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
map <- plot_geo(diabetes, locationmode = 'USA-states') %>%
add_trace(
locations = ~LocationAbbr, color = ~DataValue, colors = 'Blues'
) %>%
layout(
title = 'Mortality Rates of <enter disease here> in <enter year here>',
geo = g
)
map
diabetes <- diabetes.data %>% select(YearStart, LocationAbbr, LocationDesc, Topic, DataValue,
DataValueType, DataValueUnit,
StratificationCategory1, Stratification1)
g <- list (
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
map <- plot_geo(diabetes, locationmode = 'USA-states') %>%
add_trace(
z = ~DataValue, color = ~DataValue,
locations = ~LocationAbbr, colors = 'Blues'
) %>%
layout(
title = 'Mortality Rates of <enter disease here> in <enter year here>',
geo = g
)
map
diabetes <- diabetes.data %>% select(YearStart, LocationAbbr, LocationDesc, Topic, DataValue,
DataValueType, DataValueUnit,
StratificationCategory1, Stratification1)
g <- list (
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
map <- plot_geo(diabetes, locationmode = 'USA-states') %>%
add_trace(
z = ~DataValue, color = ~DataValue,
locations = ~LocationAbbr, colors = 'Blues'
) %>%
colorbar(title = "cases per 100,000 people") %>%
layout(
title = 'Mortality Rates of <enter disease here> in <enter year here>',
geo = g
)
diabetes <- filter(LocationAbbr != "US")
diabetes <- diabetes %>% filter(LocationAbbr != "US")
diabetes <- diabetes %>% filter(YearStart == "2010")
diabetes <- diabetes %>% filter(YearStart == "2010") %>% filter(StratificationCategory1 == "Overall")
diabetes <- diabetes %>% filter(YearStart == "2010") %>% filter(StratificationCategory1 == "Overall") %>%
filter(DataValueType == "Number")
View(diabetes)
diabetes <- diabetes %>% group_by(LocationAbbr) %>% summarise(DataValue = max(DataValue))
diabetes <- diabetes %>% group_by(LocationAbbr) %>% summarise(DataValue = max(DataValue), na.rm = TRUE)
diabetes <- diabetes %>% group_by(LocationAbbr) %>% summarise(DataValue = max(DataValue, na.rm = TRUE))
